// Code generated by mockery v1.0.0. DO NOT EDIT.

package authbackendmock

import (
	context "context"

	authbackend "github.com/slok/bilrost/internal/authbackend"

	mock "github.com/stretchr/testify/mock"
)

// AppRegisterer is an autogenerated mock type for the AppRegisterer type
type AppRegisterer struct {
	mock.Mock
}

// RegisterApp provides a mock function with given fields: ctx, app
func (_m *AppRegisterer) RegisterApp(ctx context.Context, app authbackend.OIDCApp) (*authbackend.OIDCAppRegistryData, error) {
	ret := _m.Called(ctx, app)

	var r0 *authbackend.OIDCAppRegistryData
	if rf, ok := ret.Get(0).(func(context.Context, authbackend.OIDCApp) *authbackend.OIDCAppRegistryData); ok {
		r0 = rf(ctx, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authbackend.OIDCAppRegistryData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, authbackend.OIDCApp) error); ok {
		r1 = rf(ctx, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterApp provides a mock function with given fields: ctx, appID
func (_m *AppRegisterer) UnregisterApp(ctx context.Context, appID string) error {
	ret := _m.Called(ctx, appID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
